// SPDX-License-Identifier: MIT
/*
Name: Private Data Exposure

Description:
Solidity stores the variables defined in the contract in slots. Each slot can accommodate up to 32 bytes or 256 bits. Given that all data stored on-chain, whether public or private, can be read, it is possible to read private data from the Vault contract by predicting the memory slot where the private data resides.

If the Vault contract is utilized in a production environment, malicious actors could employ similar techniques to access sensitive information such as user passwords.
Mitigation:
Avoid storing sensitive data on-chain

REF
https://quillaudits.medium.com/accessing-private-data-in-smart-contracts-quillaudits-fe847581ce6d

*/

pragma solidity ^0.8.18;

import "forge-std/Test.sol";

contract Vault {
    struct User {
        uint256 id;
        bytes32 password;
    }

    uint256 private password; // slot 0
    User[] private users; // slot 1
    mapping(uint256 => User) private idToUser; // slot 2

    constructor(uint256 _password) {
        password = _password;
        User memory user = User({id: 0, password: bytes32(_password)});
        users.push(user);
        idToUser[0] = user;
    }

    function getArrayLocation(uint256 slot, uint256 index, uint256 elementSize) public pure returns (bytes32) {
        return bytes32(uint256(keccak256(abi.encodePacked(slot, index * elementSize))));
    }
}
