// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/return-break.sol";

contract ContractTest is Test {
    BankContractBug BankContractBugContract;
    FixedBank FixedBankContract;

    function setUp() public {
        BankContractBugContract = new BankContractBug();
        FixedBankContract = new FixedBank();
    }

    function testReturnBug() public {
        address[] memory bankAddresses = new address[](3);
        string[] memory bankNames = new string[](3);

        // Bank account 1
        bankAddresses[0] = address(1);
        bankNames[0] = "ABC Bank";

        // Bank account 2
        bankAddresses[1] = address(2);
        bankNames[1] = "XYZ Bank";

        // Bank account 3
        bankAddresses[2] = address(3);
        bankNames[2] = "Global Bank";

        BankContractBugContract.addBanks(bankAddresses, bankNames);
        BankContractBugContract.getBankCount();
    }

    function testBreak() public {
        address[] memory bankAddresses = new address[](3);
        string[] memory bankNames = new string[](3);

        // Bank account 1
        bankAddresses[0] = address(1);
        bankNames[0] = "ABC Bank";

        // Bank account 2
        bankAddresses[1] = address(2);
        bankNames[1] = "XYZ Bank";

        // Bank account 3
        bankAddresses[2] = address(3);
        bankNames[2] = "Global Bank";

        FixedBankContract.addBanks(bankAddresses, bankNames);
        FixedBankContract.getBankCount();
    }

    receive() external payable {}
}
